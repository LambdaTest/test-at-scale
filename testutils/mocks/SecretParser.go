// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	core "github.com/LambdaTest/synapse/pkg/core"
	mock "github.com/stretchr/testify/mock"
)

// SecretParser is an autogenerated mock type for the SecretParser type
type SecretParser struct {
	mock.Mock
}

// Expired provides a mock function with given fields: token
func (_m *SecretParser) Expired(token *core.Oauth) bool {
	ret := _m.Called(token)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*core.Oauth) bool); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetOauthSecret provides a mock function with given fields: filepath
func (_m *SecretParser) GetOauthSecret(filepath string) (*core.Oauth, error) {
	ret := _m.Called(filepath)

	var r0 *core.Oauth
	if rf, ok := ret.Get(0).(func(string) *core.Oauth); ok {
		r0 = rf(filepath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Oauth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filepath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepoSecret provides a mock function with given fields: _a0
func (_m *SecretParser) GetRepoSecret(_a0 string) (map[string]string, error) {
	ret := _m.Called(_a0)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubstituteSecret provides a mock function with given fields: command, secretData
func (_m *SecretParser) SubstituteSecret(command string, secretData map[string]string) (string, error) {
	ret := _m.Called(command, secretData)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, map[string]string) string); ok {
		r0 = rf(command, secretData)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]string) error); ok {
		r1 = rf(command, secretData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
