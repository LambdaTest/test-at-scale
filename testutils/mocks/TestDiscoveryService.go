// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/LambdaTest/test-at-scale/pkg/core"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// TestDiscoveryService is an autogenerated mock type for the TestDiscoveryService type
type TestDiscoveryService struct {
	mock.Mock
}

// Discover provides a mock function with given fields: ctx, tasConfig, payload, secretData, diff, diffExists
func (_m *TestDiscoveryService) Discover(ctx context.Context, tasConfig *core.TASConfig, payload *core.Payload, secretData map[string]string, diff map[string]int, diffExists bool) error {
	ret := _m.Called(ctx, tasConfig, payload, secretData, diff, diffExists)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.TASConfig, *core.Payload, map[string]string, map[string]int, bool) error); ok {
		r0 = rf(ctx, tasConfig, payload, secretData, diff, diffExists)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DiscoverV2 provides a mock function with given fields: ctx, subModule, payload, secretData, tasConfig, diff, diffExists
func (_m *TestDiscoveryService) DiscoverV2(ctx context.Context, subModule *core.SubModule, payload *core.Payload, secretData map[string]string, tasConfig *core.TASConfigV2, diff map[string]int, diffExists bool) error {
	ret := _m.Called(ctx, subModule, payload, secretData, tasConfig, diff, diffExists)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.SubModule, *core.Payload, map[string]string, *core.TASConfigV2, map[string]int, bool) error); ok {
		r0 = rf(ctx, subModule, payload, secretData, tasConfig, diff, diffExists)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSubmoduleList provides a mock function with given fields: ctx, buildID, totalSubmodule
func (_m *TestDiscoveryService) UpdateSubmoduleList(ctx context.Context, buildID string, totalSubmodule int) error {
	ret := _m.Called(ctx, buildID, totalSubmodule)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, buildID, totalSubmodule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTestDiscoveryService creates a new instance of TestDiscoveryService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewTestDiscoveryService(t testing.TB) *TestDiscoveryService {
	mock := &TestDiscoveryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
