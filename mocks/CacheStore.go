// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CacheStore is an autogenerated mock type for the CacheStore type
type CacheStore struct {
	mock.Mock
}

// CacheWorkspace provides a mock function with given fields: ctx, subModule
func (_m *CacheStore) CacheWorkspace(ctx context.Context, subModule string) error {
	ret := _m.Called(ctx, subModule)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, subModule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Download provides a mock function with given fields: ctx, cacheKey
func (_m *CacheStore) Download(ctx context.Context, cacheKey string) error {
	ret := _m.Called(ctx, cacheKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, cacheKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExtractWorkspace provides a mock function with given fields: ctx, subModule
func (_m *CacheStore) ExtractWorkspace(ctx context.Context, subModule string) error {
	ret := _m.Called(ctx, subModule)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, subModule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upload provides a mock function with given fields: ctx, cacheKey, itemsToCompress
func (_m *CacheStore) Upload(ctx context.Context, cacheKey string, itemsToCompress ...string) error {
	_va := make([]interface{}, len(itemsToCompress))
	for _i := range itemsToCompress {
		_va[_i] = itemsToCompress[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, cacheKey)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) error); ok {
		r0 = rf(ctx, cacheKey, itemsToCompress...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCacheStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewCacheStore creates a new instance of CacheStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCacheStore(t mockConstructorTestingTNewCacheStore) *CacheStore {
	mock := &CacheStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
