// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/LambdaTest/test-at-scale/pkg/core"
	mock "github.com/stretchr/testify/mock"
)

// PayloadManager is an autogenerated mock type for the PayloadManager type
type PayloadManager struct {
	mock.Mock
}

// FetchPayload provides a mock function with given fields: ctx, payloadAddress
func (_m *PayloadManager) FetchPayload(ctx context.Context, payloadAddress string) (*core.Payload, error) {
	ret := _m.Called(ctx, payloadAddress)

	var r0 *core.Payload
	if rf, ok := ret.Get(0).(func(context.Context, string) *core.Payload); ok {
		r0 = rf(ctx, payloadAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Payload)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, payloadAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidatePayload provides a mock function with given fields: ctx, payload
func (_m *PayloadManager) ValidatePayload(ctx context.Context, payload *core.Payload) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.Payload) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPayloadManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewPayloadManager creates a new instance of PayloadManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPayloadManager(t mockConstructorTestingTNewPayloadManager) *PayloadManager {
	mock := &PayloadManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
