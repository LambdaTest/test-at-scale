// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ZstdCompressor is an autogenerated mock type for the ZstdCompressor type
type ZstdCompressor struct {
	mock.Mock
}

// Compress provides a mock function with given fields: ctx, compressedFileName, preservePath, workingDirectory, filesToCompress
func (_m *ZstdCompressor) Compress(ctx context.Context, compressedFileName string, preservePath bool, workingDirectory string, filesToCompress ...string) error {
	_va := make([]interface{}, len(filesToCompress))
	for _i := range filesToCompress {
		_va[_i] = filesToCompress[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, compressedFileName, preservePath, workingDirectory)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, string, ...string) error); ok {
		r0 = rf(ctx, compressedFileName, preservePath, workingDirectory, filesToCompress...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Decompress provides a mock function with given fields: ctx, filePath, preservePath, workingDirectory
func (_m *ZstdCompressor) Decompress(ctx context.Context, filePath string, preservePath bool, workingDirectory string) error {
	ret := _m.Called(ctx, filePath, preservePath, workingDirectory)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, string) error); ok {
		r0 = rf(ctx, filePath, preservePath, workingDirectory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewZstdCompressor interface {
	mock.TestingT
	Cleanup(func())
}

// NewZstdCompressor creates a new instance of ZstdCompressor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewZstdCompressor(t mockConstructorTestingTNewZstdCompressor) *ZstdCompressor {
	mock := &ZstdCompressor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
