// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/LambdaTest/test-at-scale/pkg/core"
	mock "github.com/stretchr/testify/mock"
)

// TestDiscoveryService is an autogenerated mock type for the TestDiscoveryService type
type TestDiscoveryService struct {
	mock.Mock
}

// Discover provides a mock function with given fields: ctx, args
func (_m *TestDiscoveryService) Discover(ctx context.Context, args *core.DiscoveyArgs) (*core.DiscoveryResult, error) {
	ret := _m.Called(ctx, args)

	var r0 *core.DiscoveryResult
	if rf, ok := ret.Get(0).(func(context.Context, *core.DiscoveyArgs) *core.DiscoveryResult); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.DiscoveryResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.DiscoveyArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendResult provides a mock function with given fields: ctx, testDiscoveryResult
func (_m *TestDiscoveryService) SendResult(ctx context.Context, testDiscoveryResult *core.DiscoveryResult) error {
	ret := _m.Called(ctx, testDiscoveryResult)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.DiscoveryResult) error); ok {
		r0 = rf(ctx, testDiscoveryResult)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTestDiscoveryService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTestDiscoveryService creates a new instance of TestDiscoveryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTestDiscoveryService(t mockConstructorTestingTNewTestDiscoveryService) *TestDiscoveryService {
	mock := &TestDiscoveryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
