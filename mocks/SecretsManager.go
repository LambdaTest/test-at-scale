// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	config "github.com/LambdaTest/test-at-scale/config"
	core "github.com/LambdaTest/test-at-scale/pkg/core"

	mock "github.com/stretchr/testify/mock"
)

// SecretsManager is an autogenerated mock type for the SecretsManager type
type SecretsManager struct {
	mock.Mock
}

// GetDockerSecrets provides a mock function with given fields: r
func (_m *SecretsManager) GetDockerSecrets(r *core.RunnerOptions) (core.ContainerImageConfig, error) {
	ret := _m.Called(r)

	var r0 core.ContainerImageConfig
	if rf, ok := ret.Get(0).(func(*core.RunnerOptions) core.ContainerImageConfig); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(core.ContainerImageConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*core.RunnerOptions) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLambdatestSecrets provides a mock function with given fields:
func (_m *SecretsManager) GetLambdatestSecrets() *config.LambdatestConfig {
	ret := _m.Called()

	var r0 *config.LambdatestConfig
	if rf, ok := ret.Get(0).(func() *config.LambdatestConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.LambdatestConfig)
		}
	}

	return r0
}

// GetSynapseName provides a mock function with given fields:
func (_m *SecretsManager) GetSynapseName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// WriteGitSecrets provides a mock function with given fields: path
func (_m *SecretsManager) WriteGitSecrets(path string) error {
	ret := _m.Called(path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteRepoSecrets provides a mock function with given fields: repo, path
func (_m *SecretsManager) WriteRepoSecrets(repo string, path string) error {
	ret := _m.Called(repo, path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(repo, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSecretsManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewSecretsManager creates a new instance of SecretsManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSecretsManager(t mockConstructorTestingTNewSecretsManager) *SecretsManager {
	mock := &SecretsManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
