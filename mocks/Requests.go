// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Requests is an autogenerated mock type for the Requests type
type Requests struct {
	mock.Mock
}

// MakeAPIRequest provides a mock function with given fields: ctx, httpMethod, endpoint, body, params, headers
func (_m *Requests) MakeAPIRequest(ctx context.Context, httpMethod string, endpoint string, body []byte, params map[string]interface{}, headers map[string]string) ([]byte, int, error) {
	ret := _m.Called(ctx, httpMethod, endpoint, body, params, headers)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte, map[string]interface{}, map[string]string) []byte); ok {
		r0 = rf(ctx, httpMethod, endpoint, body, params, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []byte, map[string]interface{}, map[string]string) int); ok {
		r1 = rf(ctx, httpMethod, endpoint, body, params, headers)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, []byte, map[string]interface{}, map[string]string) error); ok {
		r2 = rf(ctx, httpMethod, endpoint, body, params, headers)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewRequests interface {
	mock.TestingT
	Cleanup(func())
}

// NewRequests creates a new instance of Requests. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRequests(t mockConstructorTestingTNewRequests) *Requests {
	mock := &Requests{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
