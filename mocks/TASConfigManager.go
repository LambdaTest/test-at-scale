// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/LambdaTest/test-at-scale/pkg/core"
	mock "github.com/stretchr/testify/mock"
)

// TASConfigManager is an autogenerated mock type for the TASConfigManager type
type TASConfigManager struct {
	mock.Mock
}

// GetVersion provides a mock function with given fields: path
func (_m *TASConfigManager) GetVersion(path string) (int, error) {
	ret := _m.Called(path)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadAndValidate provides a mock function with given fields: ctx, version, path, eventType, licenseTier
func (_m *TASConfigManager) LoadAndValidate(ctx context.Context, version int, path string, eventType core.EventType, licenseTier core.Tier) (interface{}, error) {
	ret := _m.Called(ctx, version, path, eventType, licenseTier)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, core.EventType, core.Tier) interface{}); ok {
		r0 = rf(ctx, version, path, eventType, licenseTier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, string, core.EventType, core.Tier) error); ok {
		r1 = rf(ctx, version, path, eventType, licenseTier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTASConfigManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewTASConfigManager creates a new instance of TASConfigManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTASConfigManager(t mockConstructorTestingTNewTASConfigManager) *TASConfigManager {
	mock := &TASConfigManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
